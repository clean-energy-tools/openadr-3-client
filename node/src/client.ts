
import util from 'node:util';
import path from 'node:path';
import { promises as fsp } from 'node:fs';
import * as url from 'url';

export const __filename = url.fileURLToPath(import.meta.url);
export const __dirname = path.dirname(__filename);

import YAML from 'js-yaml';
import * as OADR3 from 'openadr-3-ts-types';

import createClient, {
    type Middleware
} from "openapi-fetch";
// generated by openapi-typescript
import type { paths } from "./openapi-typescript/oadr3.js";

import Joi from 'joi';

/**
 * A named client for OpenADR 3, connecting to a specific VTN, using
 * pre-provisioned client_id/secret/scope strings.  This client
 * generates an access token as needed.  It remembers the expirey
 * time for the token, deleting it shortly before that time expires,
 * allowing it to automatically generate a new token when required.
 * 
 * The "client" is defined by:
 *     * the URL for the VTN
 *     * the client name
 *     * the client_id, client_secret, and scope
 */
export class OADR3Client {

    #oadr3URL: URL;
    #name: string;
    #client_id: string;
    #client_secret: string;
    #scope?: string;

    #client?: any;

    /**
     * Construct a client object
     * 
     * @param oadr3URL 
     * @param name 
     * @param client_id 
     * @param client_secret 
     * @param scope 
     */
    constructor(oadr3URL: URL, name: string, client_id: string, client_secret: string, scope?: string) {

        if (typeof oadr3URL !== 'object') {
            throw new Error(`The oadr3URL parameter must be a URL`);
        }
        if (typeof name !== 'string') {
            throw new Error('The name parameter must be a string');
        }
        if (typeof client_id !== 'string') {
            throw new Error('The client_id parameter must be a string');
        }
        if (typeof client_secret !== 'string') {
            throw new Error('The client_secret parameter must be a string');
        }
        if (typeof scope !== 'undefined' && typeof scope !== 'string') {
            throw new Error('The scope parameter, if given, must be a string');
        }

        this.#oadr3URL = oadr3URL;
        this.#name = name;
        this.#client_id = client_id;
        this.#client_secret = client_secret;
        this.#scope = scope;

        this.#client = createClient<paths>({
            baseUrl: oadr3URL.href
        });
        this.#client.use(this.#authMiddleware);


        // console.log({
        //     oadr3URL: oadr3URL,
        //     oadr3URLTHIS: this.#oadr3URL,
        //     name: name,
        //     nameTHIS: this.#name,
        //     client_id: client_id,
        //     client_idTHIS: this.#client_id,
        //     client_secret: client_secret,
        //     client_secretTHIS: this.#client_secret,
        //     scope: scope,
        //     scopeTHIS: this.#scope
        // });
    }

    /**
     * Add an Authorization header to requests
     * before they're sent.
     */
    #authMiddleware: Middleware = ((self) => {
        return <Middleware>{
        async onRequest({ request, schemaPath }) {
            // console.log(`onRequest ${util.inspect(request)}`);

            // Do nothing for auth requests.
            if (schemaPath === '/auth/token') {
                // console.log(`onRequest SKIP ${request.method} ${request.url}`);
                return undefined;
            }

            // console.log(`onRequest not skipped ${request.method} ${request.url}`);

            // fetch token, if it doesnâ€™t exist
            if (!self.#authToken) {
                const authRes = await self.fetchToken();
                if (authRes.access_token) {
                    self.#authToken = authRes;
                } else {
                    // handle auth error
                }
            }
        
            if (!self.#authToken?.access_token
             || !(typeof self.#authToken.access_token === 'string')
            ) {
                throw new Error(`authMiddleware did not generate access_token`);
            }
            
            // add Authorization header to every request
            request.headers.set(
                "Authorization",
                `Bearer ${self.#authToken?.access_token}`
            );
            return request;
        },
    }})(this);

    /**
     * Validates whether the data is of the type T
     * using the provided Joi validation schema.
     *
     * @param validator 
     * @param data 
     * @returns 
     */
    #validateObject<T>(
        validator: (data: any) => Joi.ValidationResult<any>,
        data: T
    ): T {
        // console.log(`#validateObject ${util.inspect(validator)} ${util.inspect(params)}`);
        const { error, value } = validator(data);
        // console.log(`#validateObject ${util.inspect(value)} ${util.inspect(error)}`);
        if (error) {
            throw new Error(`Validation failure ${util.inspect(error.details)}`);
        }
        return value as T;
    }

    #validateArray<T>(
        validator: (data: any) => Joi.ValidationResult<any>,
        items: any[] | undefined
    ): Array<T>
    {
        if (typeof validator === 'undefined') {
            console.log(`#validateArray validator undefined`);
        }
        const ret = new Array<T>();
        if (typeof items === 'undefined') {
            return ret;
        }
        if (!this.#isIterable(items)) {
            throw new Error(`#validateArray - items not iterable`);
        }
        for (const item of items) {
            if (typeof item === 'undefined'
                || item === null) {
                console.warn(`#validateArray item undefined or null in ${util.inspect(items)}`);
            }
            // console.log(`#validateArray item ${util.inspect(item)}`);
            const { error, value } = validator(item);
            if (error) {
                throw new Error(`#validateArray FAIL VALIDATION ${util.inspect(error.details)}`);
            }
            ret.push(value as T);
        }
        return ret;
    }

    // https://stackoverflow.com/questions/18884249/checking-whether-something-is-iterable
    #isIterable(obj: any) {
        // checks for null and undefined
        if (typeof obj === 'undefined' || obj == null) {
            return false;
        }
        return typeof obj[Symbol.iterator] === 'function';
    }


    /**
     * Fetch the URL for the VTN
     */
    get oadr3URL() { return this.#oadr3URL; }

    /**
     * Fetch the client name
     */
    get name() { return this.#name; }

    /**
     * Fetch the client_id
     */
    get client_id() { return this.#client_id; }

    /**
     * Fetch the client_secret
     */
    get client_secret() { return this.#client_secret; }

    /**
     * Fetch the scope
     */
    get scope() { return this.#scope; }

    /**
     * Compute the URL, starting from oadr3URL, for the
     * API endpoint given in the string.
     * 
     * For use with OpenAPI-Fetch, this function
     * is not needed.  But, the fetchToken method
     * 
     * @param endpoint 
     * @returns The corresponding URL object
     */
    // #endpointURL(endpoint: string): URL {
    //     const ret = new URL(this.#oadr3URL.href);
    //     const pname = ret.pathname;
    //     ret.pathname = path.join(pname, endpoint);
    //     return ret;
    // }

    #authToken?: OADR3.ClientCredentialResponse;
    #authTokenTimeout?: any;

    // clientInfo() {
    //     return {
    //         client_id: this.#client_id,
    //         client_secret: this.#client_secret,
    //         scope: this.#scope,
    //         auth: this.#authToken
    //     }
    // }

    /**
     * Generate a headers object for use with 'got'
     * for the Bearer authorization header.  It
     * uses fetchToken to automatically fetch the
     * access token.
     * 
     * @returns 
     */
    async authHeaders() {
        const token = await this.fetchToken();
        const headers = token.access_token
            ? {
                Authorization: `Bearer ${token.access_token}`
            } : undefined;

        return headers;
    }

    /**
     * Either returns an existing ClientCredentialResponse or fetches
     * one from the server.  The response object contains the access_token
     * plus other useful information.
     * 
     * @returns the ClientCredentialResponse access token for this client.
     */
    async fetchToken() {
        if (this.#authToken) {
            return this.#authToken;
        }

        let request: OADR3.ClientCredentialRequest;
        {
            let { error, value } = OADR3.joiValidateClientCredentialRequest({
                grant_type: "client_credentials",
                client_id: this.#client_id,
                client_secret: this.#client_secret,
                scope: this.#scope
            });
            if (error) {
                throw new Error(`fetchToken FAIL ${util.inspect(error.details)}`);
            }
            request = value;
        }
        // let s = new URLSearchParams(Object.entries(o)).toString();

        // For OAuth2 fetchToken, the content type
        // must be as shown here.  This gets used
        // in the client request.
        const reqHeaders = new Headers();
        reqHeaders.set('Content-Type',
            'application/x-www-form-urlencoded');

        const { data, error } = await this.#client.POST('/auth/token', {
            headers: reqHeaders,
            body: request,
            // Encoding an object in the
            // x-www-form-urlencoded format
            // is done with URLSearchParams.
            bodySerializer(body: any) {
                const ret = new URLSearchParams(
                    Object.entries(body)
                ); // .toString();
                // console.log(`serialize /auth/token body ${ret.toString()}`);
                return ret;
            }
        });

        if (error) {
            throw new Error(`#fetchToken ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
        }

        // console.log(`fetchToken fetched ${util.inspect(data)}`);

        let ccresponse: OADR3.ClientCredentialResponse;
        {
            const { error, value } = OADR3.joiClientCredentialResponse.validate(data);
            if (error) {
                throw new Error(`fetchToken FAIL response body not Client Credential Response - ${util.inspect(error.details)}`);
            }

            ccresponse = value;
        }

        // console.log(`fetchToken parsed ${util.inspect(ccresponse)}`);

        this.#rememberOAuth2Token(ccresponse);
        return ccresponse;

    }

    /**
     * Records the token, and takes care of forgetting the token
     * when the expirey time is finished.  By "token" we
     * mean the ClientCredentialResponse object.  It subtracts 15ms from
     * the expirey time to account for some slop.
     *
     * @param ccresponse 
     */
    #rememberOAuth2Token(ccresponse: OADR3.ClientCredentialResponse) {
        if (typeof this.#authTokenTimeout !== 'undefined') {
            clearTimeout(this.#authTokenTimeout);
            this.#authTokenTimeout = undefined;
        }
        this.#authToken = ccresponse;
        if (typeof ccresponse.expires_in === 'number') {
            this.#authTokenTimeout = setTimeout(() => {
                this.#authToken = undefined;
            }, ccresponse.expires_in - 15);
        }
    }


    // The following methods all implement the operations
    // in the OpenADR specification.  The actual implementation
    // is in the corresponding module in ./components.

    ///////////// Auth

    // The fetchToken operation is implemented above.

    ///////////// OBJECT GENERICS

    async #searchAllObjects<Tquery, Tobj>(
        params: Tquery,
        endpoint: string,
        pathParams: any | undefined,
        validateParams: (data: any) => any,
        validateObj: (data: any) => any
    ): Promise<Array<Tobj> | undefined> {
        const searchParams 
            = this.#validateObject<Tquery>(
                validateParams, params
            );

        const { data, error } = await this.#client.GET(endpoint,
            pathParams
            ? {
                params: { path: pathParams },
                query: searchParams
            }
            : { query: searchParams }
        );

        if (error) {
            throw new Error(`#searchAllObjects ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
        }

        return this.#validateArray<Tobj>(
            validateObj,
            data
        );
    }

    async #createObject<Tobj>(
        object: Tobj,
        endpoint: string,
        pathParams: any | undefined,
        validateObj: (data: any) => any
    ): Promise<Tobj | undefined> {

        const _obj = this.#validateObject<Tobj>(
            validateObj, object
        );

        const { data, error } = await this.#client
        .POST(endpoint, 
            pathParams
            ? {
                params: { path: pathParams },
                body: _obj
            }
            : { body: _obj }
        );
        if (error) {
            throw new Error(`#createObject ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
        }

        return this.#validateObject<Tobj>(
            validateObj, data);
    }

    async #searchObjectsByID<Tobj>(
        endpoint: string,
        pathParams: any | undefined,
        validateObj: (data: any) => any
    ): Promise<Tobj | undefined> {

        // const _obj = this.#validateObject<Tobj>(
        //     validateObj, id
        // );

        // console.log(`#searchObjectsByID id ${util.inspect(id)} endpoint ${util.inspect(endpoint)} pathParams ${util.inspect(pathParams)}`);

        const { data, error } = await this.#client
        .GET(endpoint, {
            params: { path: pathParams }
        });
        if (error) {
            throw new Error(`#searchObjectsByID ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
        }

        return this.#validateObject<Tobj>(
            validateObj, data
        );
    }

    async #updateObject<Tobj>(
        object: Tobj,
        endpoint: string,
        pathParams: any | undefined,
        validateObj: (data: any) => any
    ): Promise<Tobj | undefined> {

        // Let's assume that the object
        // has been validated by the caller.
        //
        // const _object = this.#validateObject<OADR3.Event>(
        //     validateObj, object
        // );

        const { data, error } = await this.#client
        .PUT(endpoint, {
            params: {
                path: pathParams
            },
            body: object
        });
        if (error) {
            throw new Error(`#updateObject ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
        }

        return this.#validateObject<Tobj>(
            validateObj, data
        );
    }

    async #deleteObject<Tobj>(
        endpoint: string,
        pathParams: any,
        validateObj: (data: any) => any
    ) : Promise<Tobj | undefined> {

        const { data, error } = await this.#client.DELETE(endpoint,
            {
                params: {
                    path: pathParams
                }
            }
        );
        if (error) {
            throw new Error(`#deleteObject ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
        }
    
        return this.#validateObject<Tobj>(
            validateObj, data
        );
    }

    ///////////// Events

    /**
     * Implements the searchAllEvents operation.
     *
     * @param params 
     * @returns 
     */
    async searchAllEvents(
        params: OADR3.SearchAllEventsQueryParams
    ) : Promise<Array<OADR3.Event> | undefined> {
        return this.#searchAllObjects<
            OADR3.SearchAllEventsQueryParams,
            OADR3.Event
        >(
            params,
            '/events',
            undefined,
            OADR3.joiValidateSearchAllEvents,
            OADR3.joiValidateEvent
        );
    }

    // async searchAllEvents0(
    //     params: OADR3.SearchAllEventsQueryParams
    // ) : Promise<Array<OADR3.Event> | undefined> {

    //     const searchEvents = this.#validateObject<
    //         OADR3.SearchAllEventsQueryParams
    //     >(
    //         OADR3.joiValidateSearchAllEvents, params
    //     );

    //     const { data, error } = await this.#optyclient.GET('/events',
    //         { query: searchEvents }
    //     );
    //     if (error) {
    //         throw new Error(`searchAllEvents ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateArray<OADR3.Event>(
    //         OADR3.joiValidateEvent,
    //         data
    //     );
    // }

    /**
     * Implements the createEvent operation
     * 
     * @param event 
     * @returns 
     */
    async createEvent(
        event: OADR3.Event
    ) : Promise<OADR3.Event | undefined> {
        return this.#createObject<OADR3.Event>(
            event,
            '/events',
            undefined,
            OADR3.joiValidateEvent
        );
    }

    // async createEvent0(
    //     event: OADR3.Event
    // ) : Promise<OADR3.Event | undefined> {

    //     const _event = this.#validateObject<OADR3.Event>(
    //         OADR3.joiValidateEvent, event
    //     );

    //     const { data, error } = await this.#optyclient
    //     .POST('/events', { body: _event });
    //     if (error) {
    //         throw new Error(`createEvent ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Event>(
    //         OADR3.joiValidateEvent, data);
    // }

    /**
     * Implements the searchEventsByID operation
     * 
     * @param id 
     * @returns 
     */
    async searchEventsByID(
        id: OADR3.ObjectID
    ): Promise<OADR3.Event | undefined> {

        const eventID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#searchObjectsByID<OADR3.Event>(
            '/events/{eventID}',
            { eventID },
            OADR3.joiValidateEvent
        );
    }

    // async searchEventsByID0(
    //     id: OADR3.ObjectID
    // ) : Promise<OADR3.Event | undefined> {

    //     const eventID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const { data, error } = await this.#optyclient
    //     .GET('/events/{eventID}', {
    //         params: {
    //             path: { eventID: eventID }
    //         }
    //     });
    //     if (error) {
    //         throw new Error(`searchEventsByID ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Event>(
    //         OADR3.joiValidateEvent, data
    //     );
    // }

    /**
     * Implements the updateEvent operation
     * 
     * @param event 
     * @returns 
     */
    async updateEvent(
        event: OADR3.Event
    ) : Promise<OADR3.Event | undefined> {

        const _event = this.#validateObject<OADR3.Event>(
            OADR3.joiValidateEvent, event
        );

        return this.#updateObject<OADR3.Event>(
            _event,
            '/events/{eventID}',
            { eventID: _event.id },
            OADR3.joiValidateEvent
        )
    }

    // async updateEvent0(
    //     event: OADR3.Event
    // ) : Promise<OADR3.Event | undefined> {

    //     const _event = this.#validateObject<OADR3.Event>(
    //         OADR3.joiValidateEvent, event
    //     );

    //     const { data, error } = await this.#optyclient
    //     .PUT('/events/{eventID}', {
    //         params: {
    //             path: { eventID: _event.id }
    //         },
    //         body: _event
    //     });
    //     if (error) {
    //         throw new Error(`updateEvent ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Event>(
    //         OADR3.joiValidateEvent, data);
    // }

    /**
     * Implements the deleteEvent operation
     * 
     * @param id 
     * @returns 
     */
    async deleteEvent(
        id: OADR3.ObjectID
    ) : Promise<OADR3.Event | undefined> {

        const eventID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#deleteObject<OADR3.Event>(
            '/events/{eventID}',
            { eventID: eventID },
            OADR3.joiValidateEvent
        );
    }

    // async deleteEvent0(
    //     id: OADR3.ObjectID
    // ) : Promise<OADR3.Event | undefined> {

    //     const eventID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const { data, error } = await this.#optyclient
    //     .DELETE('/events/{eventID}', {
    //         params: {
    //             path: { eventID: eventID }
    //         }
    //     });
    //     if (error) {
    //         throw new Error(`deleteEvent ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Event>(
    //         OADR3.joiValidateEvent, data
    //     );
    // }

    ///////////// Programs

    /**
     * Implements the searchAllPrograms operation
     * 
     * @param params 
     * @returns 
     */
    async searchAllPrograms(
        params: OADR3.SearchAllProgramsQueryParams
    ) : Promise<Array<OADR3.Program> | undefined> {
        return this.#searchAllObjects<
            OADR3.SearchAllProgramsQueryParams,
            OADR3.Program
        >(
            params,
            '/programs',
            undefined,
            OADR3.joiValidateSearchAllEvents,
            OADR3.joiValidateProgram
        );
    }

    // async searchAllPrograms0(
    //     params: OADR3.SearchAllProgramsQueryParams
    // ) : Promise<Array<OADR3.Program> | undefined> {

    //     const searchPrograms = this.#validateObject<
    //         OADR3.SearchAllProgramsQueryParams
    //     >(
    //         OADR3.joiValidateSearchAllEvents, params
    //     );

    //     const { data, error } = await this.#optyclient.GET('/programs',
    //         { query: searchPrograms }
    //     );
    //     if (error) {
    //         throw new Error(`searchAllPrograms ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
    
    //     return this.#validateArray<OADR3.Program>(
    //         OADR3.joiValidateProgram, data
    //     );
    // }

    /**
     * Implements the createProgram operation
     * 
     * @param program 
     * @returns 
     */
    async createProgram(
        program: OADR3.Program
    ) : Promise<OADR3.Program | undefined> {
        return this.#createObject<OADR3.Program>(
            program,
            '/programs',
            undefined,
            OADR3.joiValidateProgram
        );
    }

    // async createProgram0(
    //     program: OADR3.Program
    // ) : Promise<OADR3.Program | undefined> {
        
    //     const _program = this.#validateObject<OADR3.Program>(
    //         OADR3.joiValidateProgram, program
    //     );

    //     const { data, error } = await this.#optyclient
    //     .POST('/programs', { body: _program });
    //     if (error) {
    //         throw new Error(`createProgram ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Program>(
    //         OADR3.joiValidateProgram, data
    //     );
    // }

    /**
     * Implements the searchProgramByProgramId operation
     * 
     * @param id 
     * @returns 
     */
    async searchProgramByProgramId(
        id: OADR3.ObjectID
    ): Promise<OADR3.Program | undefined> {

        const progID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#searchObjectsByID<OADR3.Program>(
            '/programs/{programID}',
            { programID: progID },
            OADR3.joiValidateProgram
        );
    }

    // async searchProgramByProgramId0(
    //     id: OADR3.ObjectID
    // ) : Promise<OADR3.Program | undefined> {

    //     const progID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const { data, error } = await this.#optyclient
    //     .GET('/programs/{programID}', {
    //         params: {
    //             path: { programID: progID }
    //         }
    //     });
    //     if (error) {
    //         throw new Error(`searchProgramByProgramId ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Program>(
    //         OADR3.joiValidateProgram, data
    //     );
    // }

    /**
     * Implements the updateProgram operation
     * 
     * @param program 
     * @returns 
     */
    async updateProgram(
        program: OADR3.Program
    ) : Promise<OADR3.Program | undefined> {

        const _program = this.#validateObject<OADR3.Program>(
            OADR3.joiValidateProgram, program
        );

        return this.#updateObject<OADR3.Program>(
            _program,
            '/programs/{programID}',
            { programID: _program.id },
            OADR3.joiValidateProgram
        )
    }

    // async updateProgram0(
    //     program: OADR3.Program
    // ) : Promise<OADR3.Program | undefined> {

    //     const _program: OADR3.Program
    //     = this.#validateObject<OADR3.Program>(
    //         OADR3.joiValidateProgram, program
    //     );

    //     const { data, error } = await this.#optyclient
    //     .PUT('/programs/{programID}', {
    //         params: {
    //             path: { programID: _program.id }
    //         },
    //         body: _program 
    //     });
    //     if (error) {
    //         throw new Error(`updateProgram ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
    //     return this.#validateObject<OADR3.Program>(
    //         OADR3.joiValidateProgram, data
    //     );
    // }

    /**
     * Implements the deleteProgram operation
     * 
     * @param id 
     * @returns 
     */
    async deleteProgram(
        id: OADR3.ObjectID
    ) : Promise<OADR3.Program | undefined> {

        const progID: OADR3.ObjectID
        = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#deleteObject<OADR3.Program>(
            '/programs/{programID}',
            { programID: progID },
            OADR3.joiValidateProgram
        );
    }

    // async deleteProgram0(
    //     id: OADR3.ObjectID
    // ) : Promise<OADR3.Program | undefined> {

    //     const progID: OADR3.ObjectID
    //     = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const { data, error } = await this.#optyclient
    //     .DELETE('/programs/{programID}', {
    //         params: {
    //             path: { programID: progID }
    //         }
    //     });
    //     if (error) {
    //         throw new Error(`deleteProgram ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
        
    //     return this.#validateObject<OADR3.Program>(
    //         OADR3.joiValidateProgram, data
    //     );
    // }

    ///////////// Reports

    /**
     * Implements the searchAllReports operation
     * 
     * @param params 
     * @returns 
     */
    async searchAllReports(
        params: OADR3.SearchAllReportsQueryParams
    ) : Promise<Array<OADR3.Report> | undefined> {
        return this.#searchAllObjects<
            OADR3.SearchAllReportsQueryParams,
            OADR3.Report
        >(
            params,
            '/reports',
            undefined,
            OADR3.joiValidateSearchAllReports,
            OADR3.joiValidateReport
        );
    }

    // async searchAllReports0(
    //     params: OADR3.SearchAllReportsQueryParams
    // ) : Promise<Array<OADR3.Report> | undefined> {

    //     const searchReports = this.#validateObject<
    //         OADR3.SearchAllReportsQueryParams
    //     >(
    //         OADR3.joiValidateSearchAllReports, params
    //     );

    //     const { data, error } = await this.#optyclient.GET('/reports',
    //         { query: searchReports }
    //     );
    //     if (error) {
    //         throw new Error(`searchAllReports ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
        
    //     return this.#validateArray<OADR3.Report>(
    //         OADR3.joiValidateReport, data
    //     );
    // }

    /**
     * Implements the createReport operation
     * 
     * @param report 
     * @returns 
     */
    async createReport(
        report: OADR3.Report
    ) : Promise<OADR3.Report | undefined> {
        return this.#createObject<OADR3.Report>(
            report,
            '/reports',
            undefined,
            OADR3.joiValidateReport
        );
    }

    // async createReport0(
    //     report: OADR3.Report
    // ) : Promise<OADR3.Report | undefined> {

    //     const _report = this.#validateObject<OADR3.Report>(
    //         OADR3.joiValidateReport, report
    //     );

    //     const { data, error } = await this.#optyclient.POST('/reports',
    //         { body: _report }
    //     );
    //     if (error) {
    //         throw new Error(`createReport ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
        
    //     return this.#validateObject<OADR3.Report>(
    //         OADR3.joiValidateReport, data
    //     );

    // }

    /**
     * Implements the searchReportsByReportID operation
     * 
     * @param id 
     * @returns 
     */
    async searchReportsByReportID(
        id: OADR3.ObjectID
    ): Promise<OADR3.Report | undefined> {

        const reportID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#searchObjectsByID<OADR3.Report>(
            '/reports/{reportID}',
            { reportID },
            OADR3.joiValidateReport
        );
    }

    // async searchReportsByReportID0(
    //     id: OADR3.ObjectID
    // ) : Promise<OADR3.Report | undefined> {

    //     const reportID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const { data, error } = await this.#optyclient
    //     .GET('/reports/{reportID}', {
    //         params: {
    //             path: { reportID: reportID }
    //         }
    //     });
    //     if (error) {
    //         throw new Error(`searchReportsByReportID ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
        
    //     return this.#validateObject<OADR3.Report>(
    //         OADR3.joiValidateReport, data
    //     );
    // }

    /**
     * Implements the updateReport operation
     * 
     * @param report 
     * @returns 
     */
    async updateReport(
        report: OADR3.Report
    ) : Promise<OADR3.Report | undefined> {

        const _report = this.#validateObject<OADR3.Report>(
            OADR3.joiValidateReport, report
        );

        return this.#updateObject<OADR3.Report>(
            _report,
            '/reports/{reportID}',
            { reportID: _report.id },
            OADR3.joiValidateReport
        )
    }

    // async updateReport0(
    //     report: OADR3.Report
    // ) : Promise<OADR3.Report | undefined> {

    //     const _report: OADR3.Report
    //     = this.#validateObject<OADR3.Report>(
    //         OADR3.joiValidateReport, report
    //     );

    //     const { data, error } = await this.#optyclient
    //     .PUT('/reports/{reportID}', {
    //         params: {
    //             path: { reportID: _report.id }
    //         },
    //         body: _report 
    //     });
    //     if (error) {
    //         throw new Error(`updateReport ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Report>(
    //         OADR3.joiValidateReport, data
    //     );
    // }

    /**
     * Implements the deleteReport operation
     * 
     * @param id 
     * @returns 
     */
    async deleteReport(
        id: OADR3.ObjectID
    ) : Promise<OADR3.Report | undefined> {

        const reportID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#deleteObject<OADR3.Report>(
            '/reports/{reportID}',
            { reportID: reportID },
            OADR3.joiValidateReport
        );
    }

    // async deleteReport0(
    //     id: OADR3.ObjectID
    // ) : Promise<OADR3.Report | undefined> {
    //     const reportID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const { data, error } = await this.#optyclient
    //     .DELETE('/reports/{reportID}', {
    //         params: {
    //             path: { reportID: reportID }
    //         }
    //     });
    //     if (error) {
    //         throw new Error(`deleteReport ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
        
    //     return this.#validateObject<OADR3.Report>(
    //         OADR3.joiValidateReport, data
    //     );
    // }

    ///////////// Resources

    /**
     * Implements the searchVenResources operation
     * 
     * @param id 
     * @param params 
     * @returns 
     */
    async searchVenResources(
        id: OADR3.ObjectID,
        params: OADR3.SearchVenResourcesQueryParams
    ) : Promise<Array<OADR3.Resource> | undefined> {

        const venID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#searchAllObjects<
            OADR3.SearchVenResourcesQueryParams,
            OADR3.Resource
        >(
            params,
            '/vens/{venID}/resources',
            { venID },
            OADR3.joiValidateSearchAllEvents,
            OADR3.joiValidateResource
        );
    }

    // async searchVenResources0(
    //     id: OADR3.ObjectID,
    //     params: OADR3.SearchVenResourcesQueryParams
    // ) : Promise<Array<OADR3.Resource> | undefined> {

    //     const venID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const searchVenResources = this.#validateObject<
    //         OADR3.SearchVenResourcesQueryParams
    //     >(
    //         OADR3.joiValidateSearchVenResources, params
    //     );

    //     const { data, error } = await this.#optyclient.GET('/vens/{venID}/resources', {
    //         params: {
    //             path: { venID: venID },
    //             query: searchVenResources
    //         },
    //     });
    //     if (error) {
    //         throw new Error(`searchVenResources ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
        
    //     return this.#validateArray<OADR3.Program>(
    //         OADR3.joiValidateResource, data
    //     );
    // }

    /**
     * Implements the createResource operation
     * 
     * @param id 
     * @param resource 
     * @returns 
     */
    async createResource(
        id: OADR3.ObjectID,
        resource: OADR3.Resource
    ) : Promise<OADR3.Resource | undefined> {

        const venID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#createObject<OADR3.Resource>(
            resource,
            '/vens/{venID}/resources',
            { venID },
            OADR3.joiValidateResource
        );
    }

    // async createResource0(
    //     id: OADR3.ObjectID,
    //     resource: OADR3.Resource
    // ) : Promise<OADR3.Resource | undefined> {

    //     const venID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const _resource = this.#validateObject<OADR3.Resource>(
    //         OADR3.joiValidateResource, resource
    //     );

    //     const { data, error } = await this.#optyclient
    //     .POST('/vens/{venID}/resources', {
    //         params: {
    //             path: {
    //                 venID: venID
    //             },
    //         },
    //         body: _resource
    //     });
    //     if (error) {
    //         throw new Error(`createResource ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Resource>(
    //         OADR3.joiValidateResource, data
    //     );
    // }

    /**
     * Implements the searchVenResourceByID operation
     * 
     * @param vid 
     * @param rid 
     * @returns 
     */
    async searchVenResourceByID(
        vid: OADR3.ObjectID,
        rid: OADR3.ObjectID,
    ): Promise<OADR3.Resource | undefined> {

        const venID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, vid
        );

        const resourceID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, rid
        );

        return this.#searchObjectsByID<OADR3.Resource>(
            '/vens/{venID}/resources/{resourceID}',
            { venID, resourceID },
            OADR3.joiValidateResource
        );
    }

    // async searchVenResourceByID0(
    //     vid: OADR3.ObjectID,
    //     rid: OADR3.ObjectID,
    // ) : Promise<OADR3.Resource | undefined> {

    //     const venID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, vid
    //     );

    //     const resourceID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, rid
    //     );

    //     const { data, error } = await this.#optyclient
    //     .GET('/vens/{venID}/resources/{resourceID}', {
    //         params: {
    //             path: {
    //                 venID: venID,
    //                 resourceID: resourceID
    //             }
    //         }
    //     });
    //     if (error) {
    //         throw new Error(`searchVenResourceByID ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Resource>(
    //         OADR3.joiValidateResource, data
    //     );
    // }

    /**
     * Implements the updateVenResource operation
     * 
     * @param vid 
     * @param resource 
     * @returns 
     */
    async updateVenResource(
        vid: OADR3.ObjectID,
        resource: OADR3.Resource
    ) : Promise<OADR3.Resource | undefined> {

        const venID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, vid
        );

        const _resource = this.#validateObject<OADR3.Resource>(
            OADR3.joiValidateResource, resource
        );

        return this.#updateObject<OADR3.Resource>(
            _resource,
            '/vens/{venID}/resources/{resourceID}',
            {
                venID: venID,
                resourceID: _resource.id
            },
            OADR3.joiValidateResource
        )
    }

    // async updateVenResource0(
    //     vid: OADR3.ObjectID,
    //     resource: OADR3.Resource
    // ) : Promise<OADR3.Resource | undefined> {

    //     const venID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, vid
    //     );

    //     const _resource = this.#validateObject<OADR3.Resource>(
    //         OADR3.joiValidateResource, resource
    //     );

    //     const { data, error } = await this.#optyclient
    //     .PUT('/vens/{venID}/resources/{resourceID}', {
    //         params: {
    //             path: {
    //                 venID: venID,
    //                 resourceID: _resource.id
    //             },
    //         },
    //         body: _resource
    //     });
    //     if (error) {
    //         throw new Error(`updateVenResource ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Resource>(
    //         OADR3.joiValidateResource, data
    //     );
    // }

    /**
     * Implements the deleteVenResource operation
     * 
     * @param vid 
     * @param rid 
     * @returns 
     */
    async deleteVenResource(
        vid: OADR3.ObjectID, 
        rid: OADR3.ObjectID
    ) : Promise<OADR3.Resource | undefined> {

        const venID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, vid
        );

        const resourceID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, rid
        );

        return this.#deleteObject<OADR3.Resource>(
            '/vens/{venID}/resources/{resourceID}',
            {
                venID: venID,
                resourceID: resourceID
            },
            OADR3.joiValidateResource
        );
    }

    // async deleteVenResource0(
    //     vid: OADR3.ObjectID, 
    //     rid: OADR3.ObjectID
    // ) : Promise<OADR3.Resource | undefined> {

    //     const venID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, vid
    //     );

    //     const resourceID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, rid
    //     );

    //     const { data, error } = await this.#optyclient
    //     .DELETE('/vens/{venID}/resources/{resourceID}', {
    //         params: {
    //             path: {
    //                 venID: venID,
    //                 resourceID: resourceID
    //             }
    //         }
    //     });
    //     if (error) {
    //         throw new Error(`deleteVenResource ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Resource>(
    //         OADR3.joiValidateResource, data
    //     );
    // }

    ///////////// Subscriptions

    /**
     * Implements the searchSubscriptions operation
     * 
     * @param params 
     * @returns 
     */
    async searchSubscriptions(
        params: OADR3.SearchSubscriptionsQueryParams
    ) : Promise<Array<OADR3.Subscription> | undefined> {
        return this.#searchAllObjects<
            OADR3.SearchSubscriptionsQueryParams,
            OADR3.Subscription
        >(
            params,
            '/subscriptions',
            undefined,
            OADR3.joiValidateSearchSubscriptions,
            OADR3.joiValidateSubscription
        );
    }

    // async searchSubscriptions0(
    //     params: OADR3.SearchSubscriptionsQueryParams
    // ) : Promise<Array<OADR3.Subscription> | undefined> {

    //     const searchSubscriptions = this.#validateObject<
    //         OADR3.SearchSubscriptionsQueryParams
    //     >(
    //         OADR3.joiValidateSearchSubscriptions, params
    //     );

    //     const { data, error } = await this.#optyclient.GET('/subscriptions',
    //         { query: searchSubscriptions }
    //     );
    //     if (error) {
    //         throw new Error(`searchSubscriptions ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
        

    //     return this.#validateArray<OADR3.Subscription>(
    //         OADR3.joiValidateSubscription, data
    //     );
    // }

    /**
     * Implements the createSubscription operation
     * 
     * @param subscription 
     * @returns 
     */
    async createSubscription(
        subscription: OADR3.Subscription
    ) : Promise<OADR3.Subscription | undefined> {
        return this.#createObject<OADR3.Subscription>(
            subscription,
            '/subscriptions',
            undefined,
            OADR3.joiValidateSubscription
        );
    }

    // async createSubscription0(
    //     subscription: OADR3.Subscription
    // ) : Promise<OADR3.Subscription | undefined> {

    //     const _sub = this.#validateObject<
    //         OADR3.Subscription
    //     >(
    //         OADR3.joiValidateSubscription, subscription
    //     );

    //     const { data, error } = await this.#optyclient
    //     .POST('/subscriptions', { body: _sub });
    //     if (error) {
    //         throw new Error(`createSubscription ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Subscription>(
    //         OADR3.joiValidateSubscription, data
    //     );
    // }

    /**
     * Implements the searchSubscriptionByID operation
     * 
     * @param id 
     * @returns 
     */
    async searchSubscriptionByID(
        id: OADR3.ObjectID
    ): Promise<OADR3.Subscription | undefined> {

        const subID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#searchObjectsByID<OADR3.Subscription>(
            '/subscriptions/{subscriptionID}',
            { subscriptionID: subID },
            OADR3.joiValidateSubscription
        );
    }

    // async searchSubscriptionByID0(
    //     id: OADR3.ObjectID
    // ) : Promise<OADR3.Subscription | undefined> {
    //     const subID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const { data, error } = await this.#optyclient
    //     .GET('/subscriptions/{subscriptionID}', {
    //         params: {
    //             path: { subscriptionID: subID }
    //         }
    //     });
    //     if (error) {
    //         throw new Error(`searchSubscriptionByID ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Subscription>(
    //         OADR3.joiValidateSubscription, data
    //     );
    // }

    /**
     * Implements the updateSubscription operation
     * 
     * @param subscription 
     * @returns 
     */
    async updateSubscription(
        subscription: OADR3.Subscription
    ) : Promise<OADR3.Subscription | undefined> {

        const _sub = this.#validateObject<
            OADR3.Subscription
        >(
            OADR3.joiValidateSubscription, subscription
        );

        return this.#updateObject<OADR3.Subscription>(
            _sub,
            '/subscriptions/{subscriptionID}',
            { subscriptionID: _sub.id },
            OADR3.joiValidateSubscription
        )
    }

    // async updateSubscription0(
    //     subscription: OADR3.Subscription
    // ) : Promise<OADR3.Subscription | undefined> {
    //     const _sub = this.#validateObject<
    //         OADR3.Subscription
    //     >(
    //         OADR3.joiValidateSubscription, subscription
    //     );

    //     const { data, error } = await this.#optyclient
    //     .PUT('/subscriptions/{subscriptionID}', {
    //         params: {
    //             path: { subscriptionID: _sub.id }
    //         },
    //         body: _sub
    //     });
    //     if (error) {
    //         throw new Error(`updateSubscription ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Subscription>(
    //         OADR3.joiValidateSubscription, data
    //     );
    // }

    /**
     * Implements the deleteSubscription operation
     * 
     * @param id 
     * @returns 
     */
    async deleteSubscription(
        id: OADR3.ObjectID
    ) : Promise<OADR3.Subscription | undefined> {

        const subID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#deleteObject<OADR3.Subscription>(
            '/subscriptions/{subscriptionID}',
            { subscriptionID: subID },
            OADR3.joiValidateSubscription
        );
    }

    // async deleteSubscription0(
    //     id: OADR3.ObjectID
    // ) : Promise<OADR3.Subscription | undefined> {

    //     const subID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const { data, error } = await this.#optyclient
    //     .DELETE('/subscriptions/{subscriptionID}', {
    //         params: {
    //             path: { subscriptionID: subID }
    //         }
    //     });
    //     if (error) {
    //         throw new Error(`deleteSubscription ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }

    //     return this.#validateObject<OADR3.Subscription>(
    //         OADR3.joiValidateSubscription, data
    //     );
    // }

    ///////////// Vens

    /**
     * Implements the searchVens operation
     * 
     * @param params 
     * @returns 
     */
    async searchVens(
        params: OADR3.SearchVensQueryParams
    ) : Promise<Array<OADR3.Ven> | undefined> {
        return this.#searchAllObjects<
            OADR3.SearchVensQueryParams,
            OADR3.Ven
        >(
            params,
            '/vens',
            undefined,
            OADR3.joiValidateSearchVens,
            OADR3.joiValidateVen
        );
    }

    // async searchVens0(
    //     params: OADR3.SearchVensQueryParams
    // ) : Promise<Array<OADR3.Ven> | undefined> {

    //     const searchVens = this.#validateObject<
    //         OADR3.SearchVensQueryParams
    //     >(
    //         OADR3.joiValidateSearchVens, params
    //     );

    //     const { data, error } = await this.#optyclient.GET('/vens',
    //         { query: searchVens }
    //     );
    //     if (error) {
    //         throw new Error(`searchVens ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
    
    //     return this.#validateArray<OADR3.Ven>(
    //         OADR3.joiValidateVen, data
    //     );
    // }

    /**
     * Implements the createVen operation
     * 
     * @param ven 
     * @returns 
     */
    async createVen(
        ven: OADR3.Ven
    ) : Promise<OADR3.Ven | undefined> {
        return this.#createObject<OADR3.Ven>(
            ven,
            '/vens',
            undefined,
            OADR3.joiValidateVen
        );
    }

    // async createVen0(
    //     ven: OADR3.Ven
    // ) : Promise<OADR3.Ven | undefined> {

    //     const _ven = this.#validateObject<OADR3.Ven>(
    //         OADR3.joiValidateVen, ven
    //     );

    //     const { data, error } = await this.#optyclient.POST('/vens',
    //         { body: _ven }
    //     );
    //     if (error) {
    //         throw new Error(`createVen ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
    
    //     return this.#validateObject<OADR3.Ven>(
    //         OADR3.joiValidateVen, data
    //     );
    // }

    /**
     * Implements the searchVenByID operation
     * 
     * @param id 
     * @returns 
     */
    async searchVenByID(
        id: OADR3.ObjectID
    ): Promise<OADR3.Ven | undefined> {

        const venID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#searchObjectsByID<OADR3.Ven>(
            '/vens/{venID}',
            { venID },
            OADR3.joiValidateVen
        );
    }

    // async searchVenByID0(
    //     id: OADR3.ObjectID
    // ) : Promise<OADR3.Ven | undefined> {

    //     const venID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const { data, error } = await this.#optyclient.GET('/vens/{venID}',
    //         {
    //             params: {
    //                 path: { venID }
    //             }
    //         }
    //     );
    //     if (error) {
    //         throw new Error(`searchVenByID ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
    
    //     return this.#validateObject<OADR3.Ven>(
    //         OADR3.joiValidateVen, data
    //     );
    // }

    /**
     * Implements the updateVen operation
     * 
     * @param ven 
     * @returns 
     */
    async updateVen(
        ven: OADR3.Ven
    ) : Promise<OADR3.Ven | undefined> {

        const _ven = this.#validateObject<OADR3.Ven>(
            OADR3.joiValidateVen, ven
        );

        return this.#updateObject<OADR3.Ven>(
            _ven,
            '/vens/{venID}',
            { venID: _ven.id },
            OADR3.joiValidateVen
        )
    }

    // async updateVen0(
    //     ven: OADR3.Ven
    // ) : Promise<OADR3.Ven | undefined> {
        
    //     const _ven = this.#validateObject<OADR3.Ven>(
    //         OADR3.joiValidateVen, ven
    //     );

    //     const { data, error } = await this.#optyclient.PUT('/vens/{venID}', {
    //             params: {
    //                 path: { venID: _ven.id }
    //             },
    //             body: _ven
    //     });
    //     if (error) {
    //         throw new Error(`updateVen ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
    
    //     return this.#validateObject<OADR3.Ven>(
    //         OADR3.joiValidateVen, data
    //     );
    // }

    /**
     * Implements the deleteVen operation
     * 
     * @param id 
     * @returns 
     */
    async deleteVen(
        id: OADR3.ObjectID
    ) : Promise<OADR3.Ven | undefined> {

        const venID = this.#validateObject<OADR3.ObjectID>(
            OADR3.joiValidateObjectID, id
        );

        return this.#deleteObject<OADR3.Ven>(
            '/vens/{venID}',
            { venID },
            OADR3.joiValidateVen
        );
    }

    // async deleteVen0(
    //     id: OADR3.ObjectID
    // ) : Promise<OADR3.Ven | undefined> {

    //     const venID = this.#validateObject<OADR3.ObjectID>(
    //         OADR3.joiValidateObjectID, id
    //     );

    //     const { data, error } = await this.#optyclient.DELETE('/vens/{venID}',
    //         {
    //             params: {
    //                 path: { venID }
    //             }
    //         }
    //     );
    //     if (error) {
    //         throw new Error(`deleteVen ERROR ${error.type} ${error.status} ${error.title} ${error.detail}`);
    //     }
    
    //     return this.#validateObject<OADR3.Ven>(
    //         OADR3.joiValidateVen, data
    //     );
    // }

}
