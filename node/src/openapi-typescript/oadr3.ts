/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/programs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * searches all programs
         * @description List all programs known to the server.
         *     May filter results by targetType and targetValues as query params.
         *     Use skip and pagination query params to limit response size.
         *
         */
        get: operations["searchAllPrograms"];
        put?: never;
        /**
         * create a program
         * @description Create a new program in the server.
         */
        post: operations["createProgram"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/programs/{programID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object ID of the program object. */
                programID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /**
         * searches programs by program ID
         * @description Fetch the program specified by the programID in path.
         *
         */
        get: operations["searchProgramByProgramId"];
        /**
         * update a program
         * @description Update an existing program with the programID in path.
         */
        put: operations["updateProgram"];
        post?: never;
        /**
         * delete a program
         * @description Delete an existing program with the programID in path.
         */
        delete: operations["deleteProgram"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * searches all reports
         * @description List all reports known to the server.
         *     May filter results by programID, eventID,  and clientName as query param.
         *     Use skip and pagination query params to limit response size.
         *
         */
        get: operations["searchAllReports"];
        put?: never;
        /**
         * add a report
         * @description Create a new report in the server.
         */
        post: operations["createReport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/{reportID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of a report. */
                reportID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /**
         * searches reports by reportID
         * @description Fetch the report specified by the reportID in path.
         *
         */
        get: operations["searchReportsByReportID"];
        /**
         * update a report
         * @description Update the report specified by the reportID in path.
         */
        put: operations["updateReport"];
        post?: never;
        /**
         * delete a report
         * @description Delete the report specified by the reportID in path.
         */
        delete: operations["deleteReport"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * searches all events
         * @description List all events known to the server.
         *     May filter results by programID query param.
         *     May filter results by targetType and targetValues as query params.
         *     Use skip and pagination query params to limit response size.
         *
         */
        get: operations["searchAllEvents"];
        put?: never;
        /**
         * create an event
         * @description Create a new event in the server.
         */
        post: operations["createEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of event. */
                eventID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /**
         * search events by ID
         * @description Fetch event associated with the eventID in path.
         *
         */
        get: operations["searchEventsByID"];
        /**
         * update an event
         * @description Update the event specified by the eventID in path.
         */
        put: operations["updateEvent"];
        post?: never;
        /**
         * delete an event
         * @description Delete the event specified by the eventID in path.
         *
         */
        delete: operations["deleteEvent"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * search subscriptions
         * @description List all subscriptions.
         *     May filter results by programID and clientName as query params.
         *     May filter results by targetType and targetValues as query params.
         *     May filter results by objects as query param. See objectTypes schema.
         *     Use skip and pagination query params to limit response size.
         *
         */
        get: operations["searchSubscriptions"];
        put?: never;
        /**
         * create subscription
         * @description Create a new subscription.
         */
        post: operations["createSubscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscriptions/{subscriptionID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of the associated subscription. */
                subscriptionID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /**
         * search subscriptions by ID
         * @description Return the subscription specified by subscriptionID specified in path.
         */
        get: operations["searchSubscriptionByID"];
        /**
         * update  subscription
         * @description Update the subscription specified by subscriptionID specified in path.
         */
        put: operations["updateSubscription"];
        post?: never;
        /**
         * delete  subscription
         * @description Delete the subscription specified by subscriptionID specified in path.
         */
        delete: operations["deleteSubscription"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * search vens
         * @description List all vens.
         *     May filter results by venName as query param.
         *     May filter results by targetType and targetValues as query params.
         *     Use skip and pagination query params to limit response size.
         *
         */
        get: operations["searchVens"];
        put?: never;
        /**
         * create ven
         * @description Create a new ven.
         */
        post: operations["createVen"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vens/{venID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of ven. */
                venID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /**
         * search vens by ID
         * @description Return the ven specified by venID specified in path.
         */
        get: operations["searchVenByID"];
        /**
         * update  ven
         * @description Update the ven specified by venID specified in path.
         */
        put: operations["updateVen"];
        post?: never;
        /**
         * delete  ven
         * @description Delete the ven specified by venID specified in path.
         */
        delete: operations["deleteVen"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vens/{venID}/resources": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Numeric ID of ven. */
                venID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /**
         * search ven resources
         * @description List all ven resources associated with ven with specified venID.
         *     May filter results by resourceName as query params.
         *     May filter results by targetType and targetValues as query params.
         *     Use skip and pagination query params to limit response size.
         *
         */
        get: operations["searchVenResources"];
        put?: never;
        /**
         * create resource
         * @description Create a new resource.
         */
        post: operations["createResource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vens/{venID}/resources/{resourceID}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of the associated ven. */
                venID: components["schemas"]["objectID"];
                /** @description object ID of the resource. */
                resourceID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /**
         * search ven resources by ID
         * @description Return the ven resource specified by venID and resourceID specified in path.
         */
        get: operations["searchVenResourceByID"];
        /**
         * update  ven resource
         * @description Update the ven resource specified by venID and resourceID specified in path.
         */
        put: operations["updateVenResource"];
        post?: never;
        /**
         * delete  ven resource
         * @description Delete the ven resource specified by venID and resourceID specified in path.
         */
        delete: operations["deleteVenResource"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * fetch a token
         * @description Return an access token based on clientID and clientSecret.
         */
        post: operations["fetchToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Provides program specific metadata from VTN to VEN. */
        program: {
            id?: components["schemas"]["objectID"];
            createdDateTime?: components["schemas"]["dateTime"];
            modificationDateTime?: components["schemas"]["dateTime"];
            /**
             * @description Used as discriminator (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            objectType: "program";
            /**
             * @description Short name to uniquely identify program.
             * @example ResTOU
             */
            programName: string;
            /**
             * @description Long name of program for human readability.
             * @default null
             * @example Residential Time of Use-A
             */
            programLongName: string | null;
            /**
             * @description Short name of energy retailer providing the program.
             * @default null
             * @example ACME
             */
            retailerName: string | null;
            /**
             * @description Long name of energy retailer for human readability.
             * @default null
             * @example ACME Electric Inc.
             */
            retailerLongName: string | null;
            /**
             * @description A program defined categorization.
             * @default null
             * @example PRICING_TARIFF
             */
            programType: string | null;
            /**
             * @description Alpha-2 code per ISO 3166-1.
             * @default null
             * @example US
             */
            country: string | null;
            /**
             * @description Coding per ISO 3166-2. E.g. state in US.
             * @default null
             * @example CO
             */
            principalSubdivision: string | null;
            timeZoneOffset?: components["schemas"]["duration"];
            intervalPeriod?: components["schemas"]["intervalPeriod"];
            /**
             * @description A list of programDescriptions
             * @default null
             */
            programDescriptions: {
                /**
                 * Format: uri
                 * @description A human or machine readable program description
                 * @example www.myCorporation.com/myProgramDescription
                 */
                URL: string;
            }[] | null;
            /**
             * @description True if events are fixed once transmitted.
             * @default null
             * @example false
             */
            bindingEvents: boolean | null;
            /**
             * @description True if events have been adapted from a grid event.
             * @default null
             * @example false
             */
            localPrice: boolean | null;
            /**
             * @description A list of payloadDescriptors.
             * @default null
             */
            payloadDescriptors: (components["schemas"]["eventPayloadDescriptor"] | components["schemas"]["reportPayloadDescriptor"])[] | null;
            /**
             * @description A list of valuesMap objects.
             * @default null
             */
            targets: components["schemas"]["valuesMap"][] | null;
        };
        /** @description report object. */
        report: {
            id?: components["schemas"]["objectID"];
            createdDateTime?: components["schemas"]["dateTime"];
            modificationDateTime?: components["schemas"]["dateTime"];
            /**
             * @description Used as discriminator (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            objectType: "report";
            programID: components["schemas"]["objectID"];
            eventID: components["schemas"]["objectID"];
            /**
             * @description User generated identifier; may be VEN ID provisioned out-of-band.
             * @example VEN-999
             */
            clientName: string;
            /**
             * @description User defined string for use in debugging or User Interface.
             * @default null
             * @example Battery_usage_04112023
             */
            reportName: string | null;
            /**
             * @description A list of reportPayloadDescriptors.
             * @default null
             */
            payloadDescriptors: components["schemas"]["reportPayloadDescriptor"][] | null;
            /** @description A list of objects containing report data for a set of resources. */
            resources: {
                /**
                 * @description User generated identifier. A value of AGGREGATED_REPORT indicates an aggregation of more that one resource's data
                 * @example RESOURCE-999
                 */
                resourceName: string;
                intervalPeriod?: components["schemas"]["intervalPeriod"];
                /** @description A list of interval objects. */
                intervals: components["schemas"]["interval"][];
            }[];
        };
        /** @description Event object to communicate a Demand Response request to VEN.
         *     If intervalPeriod is present, sets default start time and duration of intervals.
         *      */
        event: {
            id?: components["schemas"]["objectID"];
            createdDateTime?: components["schemas"]["dateTime"];
            modificationDateTime?: components["schemas"]["dateTime"];
            /**
             * @description Used as discriminator (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            objectType: "event";
            programID: components["schemas"]["objectID"];
            /**
             * @description User defined string for use in debugging or User Interface.
             * @default null
             * @example price event 11-18-2022
             */
            eventName: string | null;
            /**
             * @description Relative priority of event. A lower number is a higher priority.
             * @default null
             * @example 0
             */
            priority: number | null;
            /**
             * @description A list of valuesMap objects.
             * @default null
             */
            targets: components["schemas"]["valuesMap"][] | null;
            /**
             * @description A list of reportDescriptor objects. Used to request reports from VEN.
             * @default null
             */
            reportDescriptors: components["schemas"]["reportDescriptor"][] | null;
            /**
             * @description A list of payloadDescriptor objects.
             * @default null
             */
            payloadDescriptors: components["schemas"]["eventPayloadDescriptor"][] | null;
            intervalPeriod?: components["schemas"]["intervalPeriod"];
            /** @description A list of interval objects. */
            intervals: components["schemas"]["interval"][];
        };
        /** @description An object created by a client to receive notification of operations on objects.
         *     Clients may subscribe to be notified when a type of object is created,
         *     updated, or deleted.
         *      */
        subscription: {
            id?: components["schemas"]["objectID"];
            createdDateTime?: components["schemas"]["dateTime"];
            modificationDateTime?: components["schemas"]["dateTime"];
            /**
             * @description Used as discriminator. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            objectType: "subscription";
            /**
             * @description User generated identifier, may be VEN identifier provisioned out-of-band.
             * @example VEN-999
             */
            clientName: string;
            programID: components["schemas"]["objectID"];
            /** @description list of objects and operations to subscribe to. */
            objectOperations: {
                /** @description list of objects to subscribe to. */
                objects: components["schemas"]["objectTypes"][];
                /** @description list of operations to subscribe to. */
                operations: ("GET" | "POST" | "PUT" | "DELETE")[];
                /**
                 * Format: uri
                 * @description User provided webhook URL.
                 * @example https://myserver.com/send/callback/here
                 */
                callbackUrl: string;
                /**
                 * @description User provided token.
                 *     To avoid custom integrations, callback endpoints
                 *     should accept the provided bearer token to authenticate VTN requests.
                 *
                 * @default null
                 * @example NCEJGI9E8ER9802UT9HUG
                 */
                bearerToken: string | null;
            }[];
            /**
             * @description A list of valuesMap objects. Used by server to filter callbacks.
             * @default null
             */
            targets: components["schemas"]["valuesMap"][] | null;
        };
        /** @description Ven represents a client with the ven role. */
        ven: {
            id?: components["schemas"]["objectID"];
            createdDateTime?: components["schemas"]["dateTime"];
            modificationDateTime?: components["schemas"]["dateTime"];
            /**
             * @description Used as discriminator. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            objectType: "ven";
            /**
             * @description User generated identifier, may be VEN identifier provisioned out-of-band.
             *     venName is expected to be unique within the scope of a VTN
             *
             * @example VEN-999
             */
            venName: string;
            /**
             * @description A list of valuesMap objects describing attributes.
             * @default null
             */
            attributes: components["schemas"]["valuesMap"][] | null;
            /**
             * @description A list of valuesMap objects describing target criteria.
             * @default null
             */
            targets: components["schemas"]["valuesMap"][] | null;
            /**
             * @description A list of resource objects representing end-devices or systems.
             * @default null
             */
            resources: components["schemas"]["resource"][] | null;
        };
        /** @description A resource is an energy device or system subject to control by a VEN.
         *      */
        resource: {
            id?: components["schemas"]["objectID"];
            createdDateTime?: components["schemas"]["dateTime"];
            modificationDateTime?: components["schemas"]["dateTime"];
            /**
             * @description Used as discriminator. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            objectType: "resource";
            /**
             * @description User generated identifier, resource may be configured with identifier out-of-band.
             *     resourceName is expected to be unique within the scope of the associated VEN.
             *
             * @example RESOURCE-999
             */
            resourceName: string;
            venID?: components["schemas"]["objectID"];
            /**
             * @description A list of valuesMap objects describing attributes.
             * @default null
             */
            attributes: components["schemas"]["valuesMap"][] | null;
            /**
             * @description A list of valuesMap objects describing target criteria.
             * @default null
             */
            targets: components["schemas"]["valuesMap"][] | null;
        };
        /** @description An object defining a temporal window and a list of valuesMaps.
         *     if intervalPeriod present may set temporal aspects of interval or override event.intervalPeriod.
         *      */
        interval: {
            /**
             * Format: int32
             * @description A client generated number assigned an interval object. Not a sequence number.
             * @example 0
             */
            id: number;
            intervalPeriod?: components["schemas"]["intervalPeriod"];
            /** @description A list of valuesMap objects. */
            payloads: components["schemas"]["valuesMap"][];
        };
        /** @description Defines temporal aspects of intervals.
         *     A duration of default PT0S indicates instantaneous or infinity, depending on payloadType.
         *     A randomizeStart of default null indicates no randomization.
         *      */
        intervalPeriod: {
            start: components["schemas"]["dateTime"];
            duration?: components["schemas"]["duration"];
            randomizeStart?: components["schemas"]["duration"];
        };
        /** @description Represents one or more values associated with a type.
         *     E.g. a type of PRICE contains a single float value.
         *      */
        valuesMap: {
            /**
             * @description Enumerated or private string signifying the nature of values.
             *     E.G. "PRICE" indicates value is to be interpreted as a currency.
             *
             * @example PRICE
             */
            type: string;
            /**
             * @description A list of data points. Most often a singular value such as a price.
             * @example [
             *       0.17
             *     ]
             */
            values: (number | string | boolean | components["schemas"]["point"])[];
        };
        /** @description A pair of floats typically used as a point on a 2 dimensional grid. */
        point: {
            /**
             * Format: float
             * @description A value on an x axis.
             * @example 1
             */
            x: number;
            /**
             * Format: float
             * @description A value on a y axis.
             * @example 2
             */
            y: number;
        };
        /** @description Contextual information used to interpret event valuesMap values.
         *     E.g. a PRICE payload simply contains a price value, an
         *     associated descriptor provides necessary context such as units and currency.
         *      */
        eventPayloadDescriptor: {
            /**
             * @description Used as discriminator.
             * @enum {string}
             */
            objectType?: "EVENT_PAYLOAD_DESCRIPTOR";
            /**
             * @description Enumerated or private string signifying the nature of values.
             * @example PRICE
             */
            payloadType: string;
            /**
             * @description Units of measure.
             * @default null
             * @example KWH
             */
            units: string | null;
            /**
             * @description Currency of price payload.
             * @default null
             * @example USD
             */
            currency: string | null;
        };
        /** @description Contextual information used to interpret report payload values.
         *     E.g. a USAGE payload simply contains a usage value, an
         *     associated descriptor provides necessary context such as units and data quality.
         *      */
        reportPayloadDescriptor: {
            /**
             * @description Used as discriminator.
             * @enum {string}
             */
            objectType?: "REPORT_PAYLOAD_DESCRIPTOR";
            /**
             * @description Enumerated or private string signifying the nature of values.
             * @example USAGE
             */
            payloadType: string;
            /**
             * @description Enumerated or private string signifying the type of reading.
             * @default null
             * @example DIRECT_READ
             */
            readingType: string | null;
            /**
             * @description Units of measure.
             * @default null
             * @example KWH
             */
            units: string | null;
            /**
             * Format: float
             * @description A quantification of the accuracy of a set of payload values.
             * @default null
             * @example 0
             */
            accuracy: number | null;
            /**
             * Format: int32
             * @description A quantification of the confidence in a set of payload values.
             * @default null
             * @example 100
             */
            confidence: number | null;
        };
        /** @description An object that may be used to request a report from a VEN.
         *      */
        reportDescriptor: {
            /**
             * @description Enumerated or private string signifying the nature of values.
             * @example USAGE
             */
            payloadType: string;
            /**
             * @description Enumerated or private string signifying the type of reading.
             * @default null
             * @example DIRECT_READ
             */
            readingType: string | null;
            /**
             * @description Units of measure.
             * @default null
             * @example KWH
             */
            units: string | null;
            /**
             * @description A list of valuesMap objects.
             * @default null
             */
            targets: components["schemas"]["valuesMap"][] | null;
            /**
             * @description True if report should aggregate results from all targeted resources.
             *     False if report includes results for each resource.
             *
             * @default false
             * @example false
             */
            aggregate: boolean;
            /**
             * Format: int32
             * @description The interval on which to generate a report.
             *     -1 indicates generate report at end of last interval.
             *
             * @default -1
             * @example -1
             */
            startInterval: number;
            /**
             * Format: int32
             * @description The number of intervals to include in a report.
             *     -1 indicates that all intervals are to be included.
             *
             * @default -1
             * @example -1
             */
            numIntervals: number;
            /**
             * @description True indicates report on intervals preceding startInterval.
             *     False indicates report on intervals following startInterval (e.g. forecast).
             *
             * @default true
             * @example true
             */
            historical: boolean;
            /**
             * Format: int32
             * @description Number of intervals that elapse between reports.
             *     -1 indicates same as numIntervals.
             *
             * @default -1
             * @example -1
             */
            frequency: number;
            /**
             * Format: int32
             * @description Number of times to repeat report.
             *     1 indicates generate one report.
             *     -1 indicates repeat indefinitely.
             *
             * @default 1
             * @example 1
             */
            repeat: number;
        };
        /**
         * @description URL safe VTN assigned object ID.
         * @example object-999
         */
        objectID: string;
        /** @description VTN generated object included in request to subscription callbackUrl.
         *      */
        notification: {
            objectType: components["schemas"]["objectTypes"];
            /**
             * @description the operation on on object that triggered the notification.
             * @example POST
             * @enum {string}
             */
            operation: "GET" | "POST" | "PUT" | "DELETE";
            /**
             * @description the object that is the subject of the notification.
             * @example {}
             */
            object: components["schemas"]["program"] | components["schemas"]["report"] | components["schemas"]["event"] | components["schemas"]["subscription"] | components["schemas"]["ven"] | components["schemas"]["resource"];
            /**
             * @description A list of valuesMap objects.
             * @default null
             */
            targets: components["schemas"]["valuesMap"][] | null;
        };
        /**
         * @description Types of objects addressable through API.
         * @example EVENT
         * @enum {string}
         */
        objectTypes: "PROGRAM" | "EVENT" | "REPORT" | "SUBSCRIPTION" | "VEN" | "RESOURCE";
        /**
         * Format: date-time
         * @description datetime in ISO 8601 format
         * @example 2023-06-15T09:30:00Z
         */
        dateTime: string;
        /**
         * @description duration in ISO 8601 format
         * @default PT0S
         * @example PT1H
         */
        duration: string;
        /** @description Body of POST request to /auth/token. Note snake case per https://www.rfc-editor.org/rfc/rfc6749
         *      */
        clientCredentialRequest: {
            /**
             * @description OAuth2 grant type, must be 'client_credentials'
             * @example client_credentials
             * @enum {string}
             */
            grant_type: "client_credentials";
            /**
             * @description client ID to exchange for bearer token.
             * @example ven_client_99
             */
            client_id: string;
            /**
             * @description client secret to exchange for bearer token.
             * @example ven_secret_99
             */
            client_secret: string;
            /**
             * @description application defined scope.
             * @example read_all
             */
            scope?: string;
        };
        /** @description Body response from /auth/token. Note snake case per https://www.rfc-editor.org/rfc/rfc6749
         *      */
        clientCredentialResponse: {
            /**
             * @description access token povided by Authorization service
             * @example MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3
             */
            access_token: string;
            /**
             * @description token type, must be Bearer.
             * @example Bearer
             * @enum {string}
             */
            token_type: "Bearer";
            /**
             * @description expiration period in seconds.
             * @example 3600
             */
            expires_in?: number;
            /**
             * @description refresh token povided by Authorization service
             * @example IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk
             */
            refresh_token?: string;
            /**
             * @description application defined scope.
             * @example read_all
             */
            scope?: string;
        };
        /** @description error reponse on HTTP 400 from auth/token per https://www.rfc-editor.org/rfc/rfc6749 */
        authError: {
            /**
             * @description As described in rfc6749 | invalid_request – The request is missing a parameter so the server can’t proceed with the request. This may also be returned if the request includes an unsupported parameter or repeats a parameter. invalid_client – Client authentication failed, such as if the request contains an invalid client ID or secret. Send an HTTP 401 response in this case. invalid_grant – The authorization code (or user’s password for the password grant type) is invalid or expired. This is also the error you would return if the redirect URL given in the authorization grant does not match the URL provided in this access token request. invalid_scope – For access token requests that include a scope (password or client_credentials grants), this error indicates an invalid scope value in the request. unauthorized_client – This client is not authorized to use the requested grant type. For example, if you restrict which applications can use the Implicit grant, you would return this error for the other apps. unsupported_grant_type – If a grant type is requested that the authorization server doesn’t recognize, use this code. Note that unknown grant types also use this specific error code rather than using the invalid_request above.
             * @example invalid_request
             * @enum {string}
             */
            error: "invalid_request" | "invalid_client" | "invalid_grant" | "invalid_scope" | "unauthorized_client" | "unsupported_grant_type";
            /**
             * @description Should be a sentence or two at most describing the circumstance of the error
             * @example Request was missing the 'client_id' parameter.
             */
            error_description?: string;
            /**
             * Format: uri
             * @description Optional reference to more detailed error description
             * @example See the full API docs at https://authorization-server.com/docs/access_toke
             */
            error_uri?: string;
        };
        /** @description reusable error response. From https://opensource.zalando.com/problem/schema.yaml.
         *      */
        problem: {
            /**
             * Format: uri
             * @description An absolute URI that identifies the problem type.
             *     When dereferenced, it SHOULD provide human-readable documentation for the problem type
             *     (e.g., using HTML).
             *
             * @default about:blank
             * @example https://zalando.github.io/problem/constraint-violation
             */
            type: string;
            /** @description A short, summary of the problem type. Written in english and readable
             *     for engineers (usually not suited for non technical stakeholders and
             *     not localized); example: Service Unavailable.
             *      */
            title?: string;
            /**
             * Format: int32
             * @description The HTTP status code generated by the origin server for this occurrence
             *     of the problem.
             *
             * @example 503
             */
            status?: number;
            /**
             * @description A human readable explanation specific to this occurrence of the
             *     problem.
             *
             * @example Connection to database timed out
             */
            detail?: string;
            /**
             * Format: uri
             * @description An absolute URI that identifies the specific occurrence of the problem.
             *     It may or may not yield further information if dereferenced.
             *
             */
            instance?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    searchAllPrograms: {
        parameters: {
            query?: {
                /** @description Indicates targeting type, e.g. GROUP */
                targetType?: string;
                /** @description List of target values, e.g. group names */
                targetValues?: string[];
                /** @description number of records to skip for pagination. */
                skip?: number;
                /** @description maximum number of records to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["program"][];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    createProgram: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description program item to add. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["program"];
            };
        };
        responses: {
            /** @description Created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["program"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if program with the same programName exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    searchProgramByProgramId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object ID of the program object. */
                programID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["program"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    updateProgram: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object ID of the program object. */
                programID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /** @description program item to update. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["program"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["program"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if program with the same programName exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    deleteProgram: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Object ID of the program object. */
                programID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["program"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    searchAllReports: {
        parameters: {
            query?: {
                /**
                 * @description filter results to reports with programID.
                 * @example program-999
                 */
                programID?: components["schemas"]["objectID"];
                /**
                 * @description filter results to reports with eventID.
                 * @example event-999
                 */
                eventID?: components["schemas"]["objectID"];
                /**
                 * @description filter results to reports with clientName.
                 * @example 999
                 */
                clientName?: string;
                /** @description number of records to skip for pagination. */
                skip?: number;
                /** @description maximum number of records to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["report"][];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    createReport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description report item to add. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["report"];
            };
        };
        responses: {
            /** @description Created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["report"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if identical report exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    searchReportsByReportID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of a report. */
                reportID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["report"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    updateReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of a report. */
                reportID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /** @description Report item to update. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["report"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["report"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if program with the same programName exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    deleteReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of a report. */
                reportID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["report"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    searchAllEvents: {
        parameters: {
            query?: {
                /**
                 * @description filter results to events with programID.
                 * @example program-999
                 */
                programID?: components["schemas"]["objectID"];
                /** @description Indicates targeting type, e.g. GROUP */
                targetType?: string;
                /** @description List of target values, e.g. group names */
                targetValues?: string[];
                /** @description number of records to skip for pagination. */
                skip?: number;
                /** @description maximum number of records to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"][];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    createEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Event item to add. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["event"];
            };
        };
        responses: {
            /** @description Created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if event with  same name already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    searchEventsByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of event. */
                eventID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    updateEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of event. */
                eventID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /** @description event item to update. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["event"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if program with the same programName exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    deleteEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of event. */
                eventID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    searchSubscriptions: {
        parameters: {
            query?: {
                /** @description filter results to subscriptions with programID. */
                programID?: components["schemas"]["objectID"];
                /** @description filter results to subscriptions with clientName. */
                clientName?: string;
                /** @description Indicates targeting type, e.g. GROUP */
                targetType?: string;
                /** @description List of target values, e.g. group names */
                targetValues?: string[];
                /** @description list of objects to subscribe to. */
                objects?: components["schemas"]["objectTypes"][];
                /** @description number of records to skip for pagination. */
                skip?: number;
                /** @description maximum number of records to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"][];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    createSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["subscription"];
            };
        };
        responses: {
            /** @description Created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if identical object already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    searchSubscriptionByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of the associated subscription. */
                subscriptionID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    updateSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of the associated subscription. */
                subscriptionID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /** @description subscription item to update. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["subscription"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if program with the same programName exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    deleteSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of the associated subscription. */
                subscriptionID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    searchVens: {
        parameters: {
            query?: {
                /** @description Indicates ven objects w venName */
                venName?: string;
                /** @description Indicates targeting type, e.g. GROUP */
                targetType?: string;
                /** @description List of target values, e.g. group names */
                targetValues?: string[];
                /** @description number of records to skip for pagination. */
                skip?: number;
                /** @description maximum number of records to return. */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ven"][];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    createVen: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ven"];
            };
        };
        responses: {
            /** @description Created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ven"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if ven with same venIdentifier already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    searchVenByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of ven. */
                venID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ven"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    updateVen: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of ven. */
                venID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /** @description ven item to update. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ven"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ven"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if program with the same programName exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    deleteVen: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of ven. */
                venID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ven"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    searchVenResources: {
        parameters: {
            query?: {
                /** @description Indicates resource objects with resourceName */
                resourceName?: string;
                /** @description Indicates targeting type, e.g. GROUP */
                targetType?: string;
                /** @description List of target values, e.g. group names */
                targetValues?: string[];
                /** @description number of records to skip for pagination. */
                skip?: number;
                /** @description maximum number of records to return. */
                limit?: number;
            };
            header?: never;
            path: {
                /** @description Numeric ID of ven. */
                venID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["resource"][];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    createResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Numeric ID of ven. */
                venID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["resource"];
            };
        };
        responses: {
            /** @description Created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["resource"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if resource with  same resourceIdentifier already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    searchVenResourceByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of the associated ven. */
                venID: components["schemas"]["objectID"];
                /** @description object ID of the resource. */
                resourceID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["resource"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    updateVenResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of the associated ven. */
                venID: components["schemas"]["objectID"];
                /** @description object ID of the resource. */
                resourceID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        /** @description resource item to update. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["resource"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["resource"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Conflict. Implementation dependent response if program with the same programName exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    deleteVenResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description object ID of the associated ven. */
                venID: components["schemas"]["objectID"];
                /** @description object ID of the resource. */
                resourceID: components["schemas"]["objectID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["resource"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
    fetchToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["clientCredentialRequest"];
            };
        };
        responses: {
            /** @description OK. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["clientCredentialResponse"];
                };
            };
            /** @description Bad Request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authError"];
                };
            };
            /** @description Forbidden. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
            /** @description Internal Server Error. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["problem"];
                };
            };
        };
    };
}
